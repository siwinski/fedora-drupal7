#!/usr/bin/python

"""
Automatic provides generator for Drupal 7 modules, profiles, and themes.

Parsed from *.info files.

First command line argument is used as version if provided.
"""

# Copyright 2013 Shawn Iwinski <shawn.iwinski@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import re
import subprocess
import sys
import os


RE_HIDDEN = re.compile(r'hidden\s*=\s*TRUE', re.IGNORECASE)


def main():
    version = sys.argv[1] if len(sys.argv) > 1 else None
    paths   = [path.rstrip() for path in sys.stdin.readlines()]

    for path in paths:
        if path.endswith('.info') and not re.search(RE_HIDDEN, open(path).read()):
            print 'drupal7(' + os.path.basename(path)[:-len('.info')] + ')',
            if version is not None:
                print '=', version
            else:
                print ''

    # Invoke the regular RPM provides generator to allow compatibility with RPM < 4.9 (no fileattrs)
    p = subprocess.Popen(['/usr/lib/rpm/find-provides'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    print p.communicate(input='\n'.join(paths))[0]


if __name__ == '__main__':
    main()
